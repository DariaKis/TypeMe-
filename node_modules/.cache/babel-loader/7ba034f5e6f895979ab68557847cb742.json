{"ast":null,"code":"import React from 'react';\n\nconst Keyboard = () => {\n  const Keyboard = {\n    elements: {\n      main: null,\n      keysContainer: null,\n      keys: []\n    },\n    eventHandlers: {\n      oninput: null,\n      onclose: null\n    },\n    properties: {\n      value: \"\",\n      capsLock: false\n    },\n\n    init() {\n      // Create main elements\n      this.elements.main = document.createElement(\"div\");\n      this.elements.keysContainer = document.createElement(\"div\"); // Setup main elements\n\n      this.elements.main.classList.add(\"keyboard\", \"keyboard--hidden\");\n      this.elements.keysContainer.classList.add(\"keyboard__keys\");\n      this.elements.keysContainer.appendChild(this._createKeys());\n      this.elements.keys = this.elements.keysContainer.querySelectorAll(\".keyboard__key\"); // Add to DOM\n\n      this.elements.main.appendChild(this.elements.keysContainer);\n      document.body.appendChild(this.elements.main); // Automatically use keyboard for elements with .use-keyboard-input\n\n      document.querySelectorAll(\".use-keyboard-input\").forEach(element => {\n        element.addEventListener(\"focus\", () => {\n          this.open(element.value, currentValue => {\n            element.value = currentValue;\n          });\n        });\n      });\n    },\n\n    _createKeys() {\n      const fragment = document.createDocumentFragment();\n      const keyLayout = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"backspace\", \"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"caps\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"enter\", \"done\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"?\", \"space\"]; // Creates HTML for an icon\n\n      const createIconHTML = icon_name => {\n        return `<i class=\"material-icons\">${icon_name}</i>`;\n      };\n\n      keyLayout.forEach(key => {\n        const keyElement = document.createElement(\"button\");\n        const insertLineBreak = [\"backspace\", \"p\", \"enter\", \"?\"].indexOf(key) !== -1; // Add attributes/classes\n\n        keyElement.setAttribute(\"type\", \"button\");\n        keyElement.classList.add(\"keyboard__key\");\n\n        switch (key) {\n          case \"backspace\":\n            keyElement.classList.add(\"keyboard__key--wide\");\n            keyElement.innerHTML = createIconHTML(\"backspace\");\n            keyElement.addEventListener(\"click\", () => {\n              this.properties.value = this.properties.value.substring(0, this.properties.value.length - 1);\n\n              this._triggerEvent(\"oninput\");\n            });\n            break;\n\n          case \"caps\":\n            keyElement.classList.add(\"keyboard__key--wide\", \"keyboard__key--activatable\");\n            keyElement.innerHTML = createIconHTML(\"keyboard_capslock\");\n            keyElement.addEventListener(\"click\", () => {\n              this._toggleCapsLock();\n\n              keyElement.classList.toggle(\"keyboard__key--active\", this.properties.capsLock);\n            });\n            break;\n\n          case \"enter\":\n            keyElement.classList.add(\"keyboard__key--wide\");\n            keyElement.innerHTML = createIconHTML(\"keyboard_return\");\n            keyElement.addEventListener(\"click\", () => {\n              this.properties.value += \"\\n\";\n\n              this._triggerEvent(\"oninput\");\n            });\n            break;\n\n          case \"space\":\n            keyElement.classList.add(\"keyboard__key--extra-wide\");\n            keyElement.innerHTML = createIconHTML(\"space_bar\");\n            keyElement.addEventListener(\"click\", () => {\n              this.properties.value += \" \";\n\n              this._triggerEvent(\"oninput\");\n            });\n            break;\n\n          case \"done\":\n            keyElement.classList.add(\"keyboard__key--wide\", \"keyboard__key--dark\");\n            keyElement.innerHTML = createIconHTML(\"check_circle\");\n            keyElement.addEventListener(\"click\", () => {\n              this.close();\n\n              this._triggerEvent(\"onclose\");\n            });\n            break;\n\n          default:\n            keyElement.textContent = key.toLowerCase();\n            keyElement.addEventListener(\"click\", () => {\n              this.properties.value += this.properties.capsLock ? key.toUpperCase() : key.toLowerCase();\n\n              this._triggerEvent(\"oninput\");\n            });\n            break;\n        }\n\n        fragment.appendChild(keyElement);\n\n        if (insertLineBreak) {\n          fragment.appendChild(document.createElement(\"br\"));\n        }\n      });\n      return fragment;\n    },\n\n    _triggerEvent(handlerName) {\n      if (typeof this.eventHandlers[handlerName] == \"function\") {\n        this.eventHandlers[handlerName](this.properties.value);\n      }\n    },\n\n    _toggleCapsLock() {\n      this.properties.capsLock = !this.properties.capsLock;\n\n      for (const key of this.elements.keys) {\n        if (key.childElementCount === 0) {\n          key.textContent = this.properties.capsLock ? key.textContent.toUpperCase() : key.textContent.toLowerCase();\n        }\n      }\n    },\n\n    open(initialValue, oninput, onclose) {\n      this.properties.value = initialValue || \"\";\n      this.eventHandlers.oninput = oninput;\n      this.eventHandlers.onclose = onclose;\n      this.elements.main.classList.remove(\"keyboard--hidden\");\n    },\n\n    close() {\n      this.properties.value = \"\";\n      this.eventHandlers.oninput = oninput;\n      this.eventHandlers.onclose = onclose;\n      this.elements.main.classList.add(\"keyboard--hidden\");\n    }\n\n  };\n  window.addEventListener(\"DOMContentLoaded\", function () {\n    Keyboard.init();\n  });\n};\n\n_c = Keyboard;\nexport default Keyboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"sources":["/Users/darida/WebstormProjects/untitledOWN/src/components/pages/keyboard/Keyboard.jsx"],"names":["React","Keyboard","elements","main","keysContainer","keys","eventHandlers","oninput","onclose","properties","value","capsLock","init","document","createElement","classList","add","appendChild","_createKeys","querySelectorAll","body","forEach","element","addEventListener","open","currentValue","fragment","createDocumentFragment","keyLayout","createIconHTML","icon_name","key","keyElement","insertLineBreak","indexOf","setAttribute","innerHTML","substring","length","_triggerEvent","_toggleCapsLock","toggle","close","textContent","toLowerCase","toUpperCase","handlerName","childElementCount","initialValue","remove","window"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Keyboard = () => {\n    const Keyboard = {\n        elements: {\n            main: null,\n            keysContainer: null,\n            keys: []\n        },\n\n        eventHandlers: {\n            oninput: null,\n            onclose: null\n        },\n\n        properties: {\n            value: \"\",\n            capsLock: false\n        },\n\n        init() {\n            // Create main elements\n            this.elements.main = document.createElement(\"div\");\n            this.elements.keysContainer = document.createElement(\"div\");\n\n            // Setup main elements\n            this.elements.main.classList.add(\"keyboard\", \"keyboard--hidden\");\n            this.elements.keysContainer.classList.add(\"keyboard__keys\");\n            this.elements.keysContainer.appendChild(this._createKeys());\n\n            this.elements.keys = this.elements.keysContainer.querySelectorAll(\".keyboard__key\");\n\n            // Add to DOM\n            this.elements.main.appendChild(this.elements.keysContainer);\n            document.body.appendChild(this.elements.main);\n\n            // Automatically use keyboard for elements with .use-keyboard-input\n            document.querySelectorAll(\".use-keyboard-input\").forEach(element => {\n                element.addEventListener(\"focus\", () => {\n                    this.open(element.value, currentValue => {\n                        element.value = currentValue;\n                    });\n                });\n            });\n        },\n\n        _createKeys() {\n            const fragment = document.createDocumentFragment();\n            const keyLayout = [\n                \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"backspace\",\n                \"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\",\n                \"caps\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"enter\",\n                \"done\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"?\",\n                \"space\"\n            ];\n\n            // Creates HTML for an icon\n            const createIconHTML = (icon_name) => {\n                return `<i class=\"material-icons\">${icon_name}</i>`;\n            };\n\n            keyLayout.forEach(key => {\n                const keyElement = document.createElement(\"button\");\n                const insertLineBreak = [\"backspace\", \"p\", \"enter\", \"?\"].indexOf(key) !== -1;\n\n                // Add attributes/classes\n                keyElement.setAttribute(\"type\", \"button\");\n                keyElement.classList.add(\"keyboard__key\");\n\n                switch (key) {\n                    case \"backspace\":\n                        keyElement.classList.add(\"keyboard__key--wide\");\n                        keyElement.innerHTML = createIconHTML(\"backspace\");\n\n                        keyElement.addEventListener(\"click\", () => {\n                            this.properties.value = this.properties.value.substring(0, this.properties.value.length - 1);\n                            this._triggerEvent(\"oninput\");\n                        });\n\n                        break;\n\n                    case \"caps\":\n                        keyElement.classList.add(\"keyboard__key--wide\", \"keyboard__key--activatable\");\n                        keyElement.innerHTML = createIconHTML(\"keyboard_capslock\");\n\n                        keyElement.addEventListener(\"click\", () => {\n                            this._toggleCapsLock();\n                            keyElement.classList.toggle(\"keyboard__key--active\", this.properties.capsLock);\n                        });\n\n                        break;\n\n                    case \"enter\":\n                        keyElement.classList.add(\"keyboard__key--wide\");\n                        keyElement.innerHTML = createIconHTML(\"keyboard_return\");\n\n                        keyElement.addEventListener(\"click\", () => {\n                            this.properties.value += \"\\n\";\n                            this._triggerEvent(\"oninput\");\n                        });\n\n                        break;\n\n                    case \"space\":\n                        keyElement.classList.add(\"keyboard__key--extra-wide\");\n                        keyElement.innerHTML = createIconHTML(\"space_bar\");\n\n                        keyElement.addEventListener(\"click\", () => {\n                            this.properties.value += \" \";\n                            this._triggerEvent(\"oninput\");\n                        });\n\n                        break;\n\n                    case \"done\":\n                        keyElement.classList.add(\"keyboard__key--wide\", \"keyboard__key--dark\");\n                        keyElement.innerHTML = createIconHTML(\"check_circle\");\n\n                        keyElement.addEventListener(\"click\", () => {\n                            this.close();\n                            this._triggerEvent(\"onclose\");\n                        });\n\n                        break;\n\n                    default:\n                        keyElement.textContent = key.toLowerCase();\n\n                        keyElement.addEventListener(\"click\", () => {\n                            this.properties.value += this.properties.capsLock ? key.toUpperCase() : key.toLowerCase();\n                            this._triggerEvent(\"oninput\");\n                        });\n\n                        break;\n                }\n\n                fragment.appendChild(keyElement);\n\n                if (insertLineBreak) {\n                    fragment.appendChild(document.createElement(\"br\"));\n                }\n            });\n\n            return fragment;\n        },\n\n        _triggerEvent(handlerName) {\n            if (typeof this.eventHandlers[handlerName] == \"function\") {\n                this.eventHandlers[handlerName](this.properties.value);\n            }\n        },\n\n        _toggleCapsLock() {\n            this.properties.capsLock = !this.properties.capsLock;\n\n            for (const key of this.elements.keys) {\n                if (key.childElementCount === 0) {\n                    key.textContent = this.properties.capsLock ? key.textContent.toUpperCase() : key.textContent.toLowerCase();\n                }\n            }\n        },\n\n        open(initialValue, oninput, onclose) {\n            this.properties.value = initialValue || \"\";\n            this.eventHandlers.oninput = oninput;\n            this.eventHandlers.onclose = onclose;\n            this.elements.main.classList.remove(\"keyboard--hidden\");\n        },\n\n        close() {\n            this.properties.value = \"\";\n            this.eventHandlers.oninput = oninput;\n            this.eventHandlers.onclose = onclose;\n            this.elements.main.classList.add(\"keyboard--hidden\");\n        }\n    };\n\n    window.addEventListener(\"DOMContentLoaded\", function () {\n        Keyboard.init();\n    });\n\n};\n\nexport default Keyboard;"]},"metadata":{},"sourceType":"module"}