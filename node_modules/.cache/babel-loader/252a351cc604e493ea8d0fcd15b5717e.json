{"ast":null,"code":"var _jsxFileName = \"/Users/darida/WebstormProjects/untitledOWN/src/components/pages/Text/TextItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useCallback } from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst KeyPress = () => {\n  _s();\n\n  let arr = [\"a\", \"k\", \"w\", \" \", \".\"];\n  const [key, setKey] = useState(\"\");\n  const [currentLetter, setCurrentLetter] = useState(0); // const [count, setCount]=useState(\"\");\n\n  function handleChange(e) {\n    setKey(e.target.value);\n  } // const typeTxt = Object.values(key).map(([value]) => ({value}));\n  //\n  //\n  //\n  // function Text () {\n  //     if (arr[0] === typeTxt[0]) {\n  //         setCurrentLetter(currentLetter+1)\n  //     }\n  // }\n\n\n  console.log(key); // function handleBackSpace(e) {\n  //         setCount(count=>[...count,key]);\n  //\n  // }\n  // console.log(typeTxt);\n  // console.log(typeTxt[3]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleChange,\n      value: key,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}; // export default KeyPress;\n// const KeyPress = (props) => {\n//     const escFunction = useCallback((event) => {\n//         if(event.keyValue === \"A\") {\n//             //Do whatever when esc is pressed\n//         }\n//         console.log(event.keyValue);\n//     }, []);\n//\n//     useEffect(() => {\n//         document.addEventListener(\"keydown\", escFunction, false);\n//\n//         return () => {\n//             document.removeEventListener(\"keydown\", escFunction, false);\n//         };\n//     }, []);\n//\n//     return (\n//         <input />\n//     )\n// };\n// export default KeyPress;\n\n\n_s(KeyPress, \"3+nm/wMTS+YfVDvHShjQ4WLJEB0=\");\n\n_c = KeyPress;\n\nvar _c;\n\n$RefreshReg$(_c, \"KeyPress\");","map":{"version":3,"sources":["/Users/darida/WebstormProjects/untitledOWN/src/components/pages/Text/TextItem.jsx"],"names":["React","useCallback","useEffect","useState","KeyPress","arr","key","setKey","currentLetter","setCurrentLetter","handleChange","e","target","value","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,QAAR,QAAuB,OAAvB;;;AAIA,MAAMC,QAAQ,GAAG,MAAK;AAAA;;AAClB,MAAIC,GAAG,GAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAe,GAAf,EAAoB,GAApB,CAAR;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBJ,QAAQ,CAAC,EAAD,CAA9B;AAEA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAkCN,QAAQ,CAAC,CAAD,CAAhD,CAJkB,CAKlB;;AAEA,WAASO,YAAT,CAAsBC,CAAtB,EAAwB;AACpBJ,IAAAA,MAAM,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH,GATiB,CAWlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ,EArBkB,CAwBlB;AACA;AACA;AACA;AAEA;AACA;;AAEA,sBACI;AAAA,2BAEI;AAAO,MAAA,QAAQ,EAAEI,YAAjB;AAAiC,MAAA,KAAK,EAAEJ,GAAxC;AAA6C,MAAA,IAAI,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAxCD,C,CAyCA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhEMF,Q;;KAAAA,Q","sourcesContent":["import React from 'react';\nimport {useCallback} from \"react\";\nimport {useEffect} from \"react\";\nimport {useState} from \"react\";\n\n\n\nconst KeyPress = () =>{\n    let arr=[\"a\", \"k\", \"w\",\" \", \".\"];\n    const [key, setKey] = useState(\"\");\n\n    const [currentLetter, setCurrentLetter]=useState(0);\n    // const [count, setCount]=useState(\"\");\n\n    function handleChange(e){\n        setKey(e.target.value);\n    }\n\n    // const typeTxt = Object.values(key).map(([value]) => ({value}));\n    //\n    //\n    //\n    // function Text () {\n    //     if (arr[0] === typeTxt[0]) {\n    //         setCurrentLetter(currentLetter+1)\n    //     }\n    // }\n\n    console.log(key);\n\n\n    // function handleBackSpace(e) {\n    //         setCount(count=>[...count,key]);\n    //\n    // }\n\n    // console.log(typeTxt);\n    // console.log(typeTxt[3]);\n\n    return (\n        <div>\n\n            <input onChange={handleChange}   value={key} type=\"text\" />\n\n            {/*<input onChange={handleChange}  onKeyDown={handleBackSpace} value={key} type=\"text\" />*/}\n        </div>\n    )\n};\n// export default KeyPress;\n\n\n// const KeyPress = (props) => {\n//     const escFunction = useCallback((event) => {\n//         if(event.keyValue === \"A\") {\n//             //Do whatever when esc is pressed\n//         }\n//         console.log(event.keyValue);\n//     }, []);\n//\n//     useEffect(() => {\n//         document.addEventListener(\"keydown\", escFunction, false);\n//\n//         return () => {\n//             document.removeEventListener(\"keydown\", escFunction, false);\n//         };\n//     }, []);\n//\n//     return (\n//         <input />\n//     )\n// };\n// export default KeyPress;\n\n\n"]},"metadata":{},"sourceType":"module"}