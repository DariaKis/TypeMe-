{"ast":null,"code":"var _jsxFileName = \"/Users/darida/WebstormProjects/untitledOWN/src/components/pages/Text/TextItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useCallback } from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst KeyPress = () => {\n  _s();\n\n  useEffect(() => {\n    handleBackSpace();\n  }, [handleChange()]);\n  const [value, setValue] = useState([]);\n  const [count, setCount] = useState([]);\n  let Text = [\"ф\", \"в\", \"з\"];\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  function handleBackSpace(e) {\n    setCount(count => [...count, value]);\n  }\n\n  console.log(count);\n  console.log(value);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleChange,\n      onKeyDown: handleBackSpace,\n      value: value,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(KeyPress, \"yyDVqXW5Y5+xXe/7KlEJ/0Yj+q0=\");\n\n_c = KeyPress;\nexport default KeyPress; // const KeyPress = (props) => {\n//     const escFunction = useCallback((event) => {\n//         if(event.keyValue === \"A\") {\n//             //Do whatever when esc is pressed\n//         }\n//         console.log(event.keyValue);\n//     }, []);\n//\n//     useEffect(() => {\n//         document.addEventListener(\"keydown\", escFunction, false);\n//\n//         return () => {\n//             document.removeEventListener(\"keydown\", escFunction, false);\n//         };\n//     }, []);\n//\n//     return (\n//         <input />\n//     )\n// };\n// export default KeyPress;\n\nvar _c;\n\n$RefreshReg$(_c, \"KeyPress\");","map":{"version":3,"sources":["/Users/darida/WebstormProjects/untitledOWN/src/components/pages/Text/TextItem.jsx"],"names":["React","useCallback","useEffect","useState","KeyPress","handleBackSpace","handleChange","value","setValue","count","setCount","Text","e","target","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,QAAR,QAAuB,OAAvB;;;AAIA,MAAMC,QAAQ,GAAG,MAAK;AAAA;;AAClBF,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,eAAe;AAClB,GAFQ,EAEP,CAACC,YAAY,EAAb,CAFO,CAAT;AAIA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEA,MAAIQ,IAAI,GAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAT;;AAEA,WAASL,YAAT,CAAsBM,CAAtB,EAAwB;AACpBJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASN,KAAV,CAAR;AACH;;AACD,WAASF,eAAT,CAAyBO,CAAzB,EAA4B;AACpBF,IAAAA,QAAQ,CAACD,KAAK,IAAE,CAAC,GAAGA,KAAJ,EAAWF,KAAX,CAAR,CAAR;AAEP;;AAEDO,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACQK,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AAGR,sBACI;AAAA,2BACI;AAAO,MAAA,QAAQ,EAAED,YAAjB;AAA+B,MAAA,SAAS,EAAED,eAA1C;AAA2D,MAAA,KAAK,EAAEE,KAAlE;AAAyE,MAAA,IAAI,EAAC;AAA9E;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA3BD;;GAAMH,Q;;KAAAA,Q;AA4BN,eAAeA,QAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport {useCallback} from \"react\";\nimport {useEffect} from \"react\";\nimport {useState} from \"react\";\n\n\n\nconst KeyPress = () =>{\n    useEffect(()=>{\n        handleBackSpace();\n    },[handleChange()]);\n\n    const [value, setValue] = useState([]);\n    const [count, setCount]=useState([]);\n\n    let Text=[\"ф\", \"в\", \"з\"];\n\n    function handleChange(e){\n        setValue(e.target.value);\n    }\n    function handleBackSpace(e) {\n            setCount(count=>[...count, value])\n\n    }\n\n    console.log(count);\n            console.log(value);\n\n\n    return (\n        <div>\n            <input onChange={handleChange} onKeyDown={handleBackSpace} value={value} type=\"text\" />\n        </div>\n    )\n};\nexport default KeyPress;\n\n\n// const KeyPress = (props) => {\n//     const escFunction = useCallback((event) => {\n//         if(event.keyValue === \"A\") {\n//             //Do whatever when esc is pressed\n//         }\n//         console.log(event.keyValue);\n//     }, []);\n//\n//     useEffect(() => {\n//         document.addEventListener(\"keydown\", escFunction, false);\n//\n//         return () => {\n//             document.removeEventListener(\"keydown\", escFunction, false);\n//         };\n//     }, []);\n//\n//     return (\n//         <input />\n//     )\n// };\n// export default KeyPress;\n\n\n"]},"metadata":{},"sourceType":"module"}