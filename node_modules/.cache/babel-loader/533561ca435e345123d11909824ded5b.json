{"ast":null,"code":"var _jsxFileName = \"/Users/darida/WebstormProjects/untitledOWN/src/components/pages/keyboard/Text.jsx\";\nimport React from 'react';\nimport MyButton from \"../../UI/button/MyButton\";\nimport AddText from \"./AddText\";\nimport { useState } from \"react/cjs/react.production.min\";\nimport { Axios as axios } from \"axios\";\nimport ShowTextList from \"./ShowTextList\";\nimport Keyboard from \"./Keyboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Text() {\n  let text = [];\n\n  async function getText() {\n    await fetch('https://baconipsum.com/api/?type=all-meat&sentences=5&start-with-lorem=1').then(res => res.json()).then(data => text = data[0]).then(() => console.log(text));\n  }\n\n  const part = createPart(text);\n\n  function createPart() {\n    const part = {\n      text,\n      strings: [],\n      maxStringLength: 70,\n      maxShowStrings: 3,\n      currentStringIndex: 0,\n      currentPrintedIndex: 0,\n      sumSymbols: 0,\n      errors: [],\n      errorCounter: 0,\n      startingTimer: 0,\n      beginningTime: false,\n      timeCounter: 0,\n      statFlag: false\n    };\n    part.text = part.text.replace(/\\n/g, '\\n ');\n    const words = part.text.split(\" \");\n    let string = [];\n\n    for (const word of words) {\n      const newStringLength = [...string, word].join(\" \").length + !word.includes(\"\\n\");\n\n      if (newStringLength > part.maxStringLength) {\n        part.strings.push(string.join(' ') + ' ');\n        string = [];\n      }\n\n      string.push(word);\n\n      if (word.includes('\\n')) {\n        part.strings.push(string.join(' '));\n        string = [];\n      }\n    }\n\n    if (string.length) {\n      part.strings.push(string.join(' '));\n    }\n\n    return part;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u041D\\u0430\\u043F\\u0435\\u0447\\u0430\\u0442\\u0430\\u0439 \\u041C\\u0435\\u043D\\u044F!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n      onClick: getText,\n      children: \"Let`s start!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Text;\nexport default Text; // async   function getText() {\n// let response = await fetch('https://baconipsum.com/api/?type=all-meat&sentences=5&start-with-lorem=1');\n// if (response.ok) {\n// let data = await response.json();\n// console.log(data[0]);\n//\n// return data[0];\n//\n// } else {\n// alert('error');\n// }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"sources":["/Users/darida/WebstormProjects/untitledOWN/src/components/pages/keyboard/Text.jsx"],"names":["React","MyButton","AddText","useState","Axios","axios","ShowTextList","Keyboard","Text","text","getText","fetch","then","res","json","data","console","log","part","createPart","strings","maxStringLength","maxShowStrings","currentStringIndex","currentPrintedIndex","sumSymbols","errors","errorCounter","startingTimer","beginningTime","timeCounter","statFlag","replace","words","split","string","word","newStringLength","join","length","includes","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MyButton from \"../../UI/button/MyButton\";\nimport AddText from \"./AddText\";\nimport {useState} from \"react/cjs/react.production.min\";\nimport {Axios as axios} from \"axios\";\nimport ShowTextList from \"./ShowTextList\";\nimport Keyboard from \"./Keyboard\";\n\n\nfunction Text() {\n    let text=[];\n\n    async function getText() {\n        await fetch('https://baconipsum.com/api/?type=all-meat&sentences=5&start-with-lorem=1')\n            .then(res => res.json())\n            .then(data => text = data[0])\n            .then(() => console.log(text))\n    }\n\n\n    const part = createPart(text);\n\n    function createPart() {\n        const part = {\n            text,\n            strings: [],\n            maxStringLength: 70,\n            maxShowStrings: 3,\n            currentStringIndex: 0,\n            currentPrintedIndex: 0,\n            sumSymbols:0,\n            errors: [],\n            errorCounter:0,\n            startingTimer: 0,\n            beginningTime:false,\n            timeCounter:0,\n            statFlag: false,\n\n        };\n\n        part.text = part.text.replace(/\\n/g, '\\n ');\n        const words = part.text.split(\" \");\n\n        let string = [];\n        for (const word of words) {\n            const newStringLength = [...string, word].join(\" \").length + !word.includes(\"\\n\");\n\n            if (newStringLength > part.maxStringLength) {\n                part.strings.push(string.join(' ') + ' ');\n                string = []\n            }\n\n            string.push(word);\n\n            if (word.includes('\\n')) {\n                part.strings.push(string.join(' '));\n                string = []\n            }\n        }\n        if (string.length) {\n            part.strings.push(string.join(' '))\n\n        }\n        return part;\n    }\n\n\n\n    return (\n        <div>\n            <div>\n                <span>Напечатай Меня!</span>\n            </div>\n\n\n            <MyButton onClick={getText}>\n                Let`s start!\n            </MyButton>\n\n            <div>\n\n            </div>\n        </div>\n\n    );\n}\n\nexport default Text;\n\n\n                    // async   function getText() {\n                    // let response = await fetch('https://baconipsum.com/api/?type=all-meat&sentences=5&start-with-lorem=1');\n                    // if (response.ok) {\n                    // let data = await response.json();\n                    // console.log(data[0]);\n                    //\n                    // return data[0];\n                    //\n                    // } else {\n                    // alert('error');\n                    // }\n                    // }"]},"metadata":{},"sourceType":"module"}