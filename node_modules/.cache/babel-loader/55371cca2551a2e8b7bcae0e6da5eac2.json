{"ast":null,"code":"var _jsxFileName = \"/Users/darida/WebstormProjects/untitledOWN/src/components/pages/keyboard/TextKeybComponent.jsx\";\nimport React from 'react';\nimport { Component } from \"react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TextKeyb extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      texts: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://baconipsum.com/api/?type=all-meat&paras=1&start-with-lorem=1\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        texts: result\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      texts\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error\", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 20\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: texts.map(text => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: text.name\n        }, text.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/darida/WebstormProjects/untitledOWN/src/components/pages/keyboard/TextKeybComponent.jsx"],"names":["React","Component","TextKeyb","constructor","props","state","error","isLoaded","texts","componentDidMount","fetch","then","res","json","result","setState","render","message","map","text","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,gCAAxB;;AAGA,eAAe,MAAMC,QAAN,SAAuBD,SAAvB,CAAgC;AAC3CE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,KAAK,EAAC,IADC;AAEPC,MAAAA,QAAQ,EAAC,KAFF;AAGPC,MAAAA,KAAK,EAAC;AAHC,KAAX;AAKH;;AAEDC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,KAAK,CAAC,sEAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAEA,GAAG,CAACC,IAAJ,EADf,EAEKF,IAFL,CAGSG,MAAD,IAAU;AACN,WAAKC,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,KAAK,EAAEM;AAFG,OAAd;AAIH,KART,EASSR,KAAD,IAAS;AACL,WAAKS,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAAC,IADC;AAEVD,QAAAA;AAFU,OAAd;AAIH,KAdT;AAgBH;;AAEDU,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACV,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,QAAyB,KAAKH,KAApC;;AACA,QAAIC,KAAJ,EAAU;AACN,0BAAO;AAAA,4BAASA,KAAK,CAACW,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD,MAEM,IAAI,CAACV,QAAL,EAAc;AAChB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFK,MAED;AACD,0BACI;AAAA,kBACKC,KAAK,CAACU,GAAN,CAAUC,IAAI,iBACX;AAAA,oBACKA,IAAI,CAACC;AADV,WAAQD,IAAI,CAACC,IAAb;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH;AAEJ;;AAhD0C","sourcesContent":["import React from 'react';\nimport {Component} from \"react/cjs/react.production.min\";\n\n\nexport default class TextKeyb extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            error:null,\n            isLoaded:false,\n            texts:[],\n        };\n    }\n\n    componentDidMount(){\n        fetch(\"https://baconipsum.com/api/?type=all-meat&paras=1&start-with-lorem=1\")\n            .then(res=>res.json())\n            .then(\n                (result)=>{\n                    this.setState({\n                        isLoaded: true,\n                        texts: result\n                    });\n                },\n                (error)=>{\n                    this.setState({\n                        isLoaded:true,\n                        error\n                    })\n                }\n            )\n    }\n\n    render(){\n        const {error, isLoaded, texts}=this.state;\n        if (error){\n            return <p>Error{error.message}</p>\n        }else if (!isLoaded){\n            return <p>Loading...</p>\n        }else{\n            return(\n                <div>\n                    {texts.map(text=>(\n                        <p key={text.name}>\n                            {text.name}\n                        </p>\n                    ))\n                }\n                    </div>\n            )\n        }\n\n    }\n}"]},"metadata":{},"sourceType":"module"}