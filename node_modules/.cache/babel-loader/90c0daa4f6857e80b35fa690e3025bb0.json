{"ast":null,"code":"var _jsxFileName = \"/Users/darida/WebstormProjects/untitledOWN/src/components/pages/Text/ViewText.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport InputText from \"./inputText\";\nimport MyButton from \"../../UI/button/MyButton\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewText = () => {\n  _s();\n\n  const [key, setKey] = useState(\"\");\n\n  function handleChange(e) {\n    setKey(e.target.value);\n  }\n\n  const typeTxt = Object.values(key).map(_ref => {\n    let [value] = _ref;\n    return {\n      value\n    };\n  });\n  let text = [];\n  const [value, setValue] = useState('');\n\n  async function getText() {\n    text = await fetch('https://baconipsum.com/api/?type=all-meat&sentences=5&start-with-lorem=1').then(res => res.json()).then(data => text = data[0]).then(() => setValue(text));\n    return text;\n  }\n\n  const txt = Object.values(value).map(_ref2 => {\n    let [value] = _ref2;\n    return {\n      value\n    };\n  });\n  useEffect(() => {\n    getText();\n  }, []);\n  const error = [];\n\n  const trueOrNot = () => {\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === typeTxt[i]) {\n        return i++;\n      } else {\n        error[i] = value;\n      }\n    }\n  };\n\n  console.log(txt);\n  console.log(typeTxt);\n  console.log(error);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: handleChange,\n      children: [\"value=\", key]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"random_txt\",\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn_txt\",\n      onClick: getText,\n      children: \"Try again!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ViewText, \"pLlW+j9FTS/8PFGiitjfBlC/Y9E=\");\n\n_c = ViewText;\nexport default ViewText;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewText\");","map":{"version":3,"sources":["/Users/darida/WebstormProjects/untitledOWN/src/components/pages/Text/ViewText.jsx"],"names":["React","useState","InputText","MyButton","useEffect","ViewText","key","setKey","handleChange","e","target","value","typeTxt","Object","values","map","text","setValue","getText","fetch","then","res","json","data","txt","error","trueOrNot","i","length","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SAAQC,SAAR,QAAwB,OAAxB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA9B;;AACA,WAASO,YAAT,CAAsBC,CAAtB,EAAwB;AACpBF,IAAAA,MAAM,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH;;AACD,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcR,GAAd,EAAmBS,GAAnB,CAAuB;AAAA,QAAC,CAACJ,KAAD,CAAD;AAAA,WAAc;AAACA,MAAAA;AAAD,KAAd;AAAA,GAAvB,CAAhB;AAEA,MAAIK,IAAI,GAAG,EAAX;AACA,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;;AAEA,iBAAeiB,OAAf,GAAyB;AACrBF,IAAAA,IAAI,GAAG,MAAMG,KAAK,CAAC,0EAAD,CAAL,CACRC,IADQ,CACHC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADJ,EAERF,IAFQ,CAEHG,IAAI,IAAIP,IAAI,GAAGO,IAAI,CAAC,CAAD,CAFhB,EAGRH,IAHQ,CAGH,MAAMH,QAAQ,CAACD,IAAD,CAHX,CAAb;AAIA,WAAOA,IAAP;AACH;;AACD,QAAMQ,GAAG,GAAGX,MAAM,CAACC,MAAP,CAAcH,KAAd,EAAqBI,GAArB,CAAyB;AAAA,QAAC,CAACJ,KAAD,CAAD;AAAA,WAAc;AAACA,MAAAA;AAAD,KAAd;AAAA,GAAzB,CAAZ;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMO,KAAK,GAAC,EAAZ;;AACA,QAAMC,SAAS,GAAC,MAAI;AAChB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACH,GAAG,CAACI,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,UAAIH,GAAG,CAACG,CAAD,CAAH,KAAWf,OAAO,CAACe,CAAD,CAAtB,EAA2B;AACvB,eAAOA,CAAC,EAAR;AAEH,OAHD,MAGM;AACFF,QAAAA,KAAK,CAACE,CAAD,CAAL,GAAShB,KAAT;AACH;AACJ;AACJ,GATD;;AAWAkB,EAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAZ;AACAiB,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEA,sBACI;AAAA,4BACI;AAAU,MAAA,QAAQ,EAAEjB,YAApB;AAAA,2BAA0CF,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBAA6BK;AAA7B;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAA4B,MAAA,OAAO,EAAEO,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CApDD;;GAAMb,Q;;KAAAA,Q;AAsDN,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react';\nimport InputText from \"./inputText\";\nimport MyButton from \"../../UI/button/MyButton\";\nimport {useEffect} from \"react\";\n\nconst ViewText = () => {\n\n    const [key, setKey] = useState(\"\");\n    function handleChange(e){\n        setKey(e.target.value);\n    }\n    const typeTxt = Object.values(key).map(([value]) => ({value}));\n\n    let text = [];\n    const [value, setValue] = useState('');\n\n    async function getText() {\n        text = await fetch('https://baconipsum.com/api/?type=all-meat&sentences=5&start-with-lorem=1')\n            .then(res => res.json())\n            .then(data => text = data[0])\n            .then(() => setValue(text));\n        return text\n    }\n    const txt = Object.values(value).map(([value]) => ({value}));\n\n    useEffect(() => {\n        getText();\n    }, []);\n\n    const error=[];\n    const trueOrNot=()=>{\n        for (let i = 0; i<txt.length; i++) {\n            if (txt[i] === typeTxt[i]) {\n                return i++;\n\n            }else {\n                error[i]=value\n            }\n        }\n    };\n\n    console.log(txt);\n    console.log(typeTxt);\n    console.log(error);\n\n    return (\n        <div>\n            <textarea onChange={handleChange} >value={key}</textarea>\n            {/*<input className=\"own_input\" onChange={handleChange}   value={key} type=\"text\" />*/}\n            <div className=\"random_txt\">{value}</div>\n            <button className=\"btn_txt\" onClick={getText}>\n                Try again!\n            </button>\n\n        </div>\n\n    );\n};\n\nexport default ViewText;"]},"metadata":{},"sourceType":"module"}