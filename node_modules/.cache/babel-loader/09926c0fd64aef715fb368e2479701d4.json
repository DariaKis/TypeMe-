{"ast":null,"code":"import React from 'react';\nimport MyButton from \"../../UI/button/MyButton\";\nconst textItem = document.querySelector('.text_item');\nconst textBtn = document.querySelector('.text_btn');\n\nasync function AddText(_ref) {\n  let {\n    value\n  } = _ref;\n  let response = await fetch('https://baconipsum.com/api/?type=all-meat&sentences=5&start-with-lorem=1');\n\n  if (response.ok) {\n    let data = await response.json();\n    console.log(data[0]);\n    return data[0];\n  } else {\n    alert('error');\n  }\n}\n\n_c = AddText;\nexport default AddText; // , {\n//     paras: {\n//         \"Content-type\": \"aplication/json; charset=UTF-8\"\n//     }\n// })\n//     .then(res => res.json())\n//\n//     .then((text) => console.log('paras', text))\n//     .then((texts)=>state.texts=state.texts.concat(texts))\n\nvar _c;\n\n$RefreshReg$(_c, \"AddText\");","map":{"version":3,"sources":["/Users/darida/WebstormProjects/untitledOWN/src/components/pages/keyboard/AddText.jsx"],"names":["React","MyButton","textItem","document","querySelector","textBtn","AddText","value","response","fetch","ok","data","json","console","log","alert"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AAEA,MAAMC,QAAQ,GAACC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,CAAf;AACA,MAAMC,OAAO,GAACF,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAd;;AAIA,eAAeE,OAAf,OAAgC;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AAE5B,MAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0EAAD,CAA1B;;AACA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACb,QAAIC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAAC,CAAD,CAAhB;AAEA,WAAOA,IAAI,CAAC,CAAD,CAAX;AAEH,GAND,MAMO;AACHI,IAAAA,KAAK,CAAC,OAAD,CAAL;AACH;AACJ;;KAZcT,O;AAcf,eAAeA,OAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport MyButton from \"../../UI/button/MyButton\";\n\nconst textItem=document.querySelector('.text_item');\nconst textBtn=document.querySelector('.text_btn');\n\n\n\nasync function AddText({value}) {\n\n    let response = await fetch('https://baconipsum.com/api/?type=all-meat&sentences=5&start-with-lorem=1');\n    if (response.ok) {\n        let data = await response.json();\n        console.log(data[0]);\n\n        return data[0];\n\n    } else {\n        alert('error');\n    }\n}\n\nexport default AddText;\n\n\n// , {\n//     paras: {\n//         \"Content-type\": \"aplication/json; charset=UTF-8\"\n//     }\n// })\n//     .then(res => res.json())\n//\n//     .then((text) => console.log('paras', text))\n//     .then((texts)=>state.texts=state.texts.concat(texts))"]},"metadata":{},"sourceType":"module"}